{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.a5eed47a83383ea845ab.hot-update.js","sources":["webpack:///./components/Search.js","webpack:///./lib/withData.js"],"sourcesContent":["import React from 'react';\r\nimport Downshift from 'downshift';\r\nimport Router from 'next/router';\r\nimport { ApolloConsumer } from 'react-apollo';\r\nimport gql from 'graphql-tag';\r\nimport debounce from 'lodash.debounce';\r\nimport { DropDown, DropDownItem, SearchStyles } from './styles/DropDown';\r\n\r\nconst SEARCH_ITEMS_QUERY = gql`\r\n  query SEARCH_ITEMS_QUERY($searchTerm: String!) {\r\n    items(where: { OR: [{ title_contains: $searchTerm }, { description_contains: $searchTerm }] }) {\r\n      id\r\n      image\r\n      title\r\n    }\r\n  }\r\n`;\r\n\r\nfunction routeToItem(item) {\r\n  Router.push({\r\n    pathname: '/item',\r\n    query: {\r\n      id: item.id,\r\n    },\r\n  });\r\n}\r\n\r\nclass AutoComplete extends React.Component {\r\n  state = {\r\n    items: [],\r\n    loading: false,\r\n  };\r\n  onChange = debounce(async (e, client) => {\r\n    console.log('Searching...');\r\n    // turn loading on\r\n    this.setState({ loading: true });\r\n    // Manually query apollo client\r\n    const res = await client.query({\r\n      query: SEARCH_ITEMS_QUERY,\r\n      variables: { searchTerm: e.target.value },\r\n    });\r\n    this.setState({\r\n      items: res.data.items,\r\n      loading: false,\r\n    });\r\n  }, 350);\r\n  render() {\r\n    return (\r\n      <SearchStyles>\r\n        <Downshift onChange={routeToItem} itemToString={item => (item === null ? '' : item.title)}>\r\n          {({ getInputProps, getItemProps, isOpen, inputValue, highlightedIndex }) => (\r\n            <div>\r\n              <ApolloConsumer>\r\n                {client => (\r\n                  <input\r\n                    {...getInputProps({\r\n                      type: 'search',\r\n                      placeholder: 'Search For An Item',\r\n                      id: 'search',\r\n                      className: this.state.loading ? 'loading' : '',\r\n                      onChange: e => {\r\n                        e.persist();\r\n                        this.onChange(e, client);\r\n                      },\r\n                    })}\r\n                  />\r\n                )}\r\n              </ApolloConsumer>\r\n              {isOpen && (\r\n                <DropDown>\r\n                  {this.state.items.map((item, index) => (\r\n                    <DropDownItem\r\n                      {...getItemProps({ item })}\r\n                      key={item.id}\r\n                      highlighted={index === highlightedIndex}\r\n                    >\r\n                      <img width=\"50\" src={item.image} alt={item.title} />\r\n                      {item.title}\r\n                    </DropDownItem>\r\n                  ))}\r\n                  {!this.state.items.length &&\r\n                    !this.state.loading && <DropDownItem> Nothing Found {inputValue}</DropDownItem>}\r\n                </DropDown>\r\n              )}\r\n            </div>\r\n          )}\r\n        </Downshift>\r\n      </SearchStyles>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AutoComplete;\r\n","import withApollo from 'next-with-apollo';\nimport ApolloClient from 'apollo-boost';\nimport { endpoint } from '../config';\nimport {LOCAL_STATE_QUERY} from '../components/Cart';\n\nfunction createClient({ headers }) {\n  return new ApolloClient({\n    uri: process.env.NODE_ENV === 'development' ? endpoint : endpoint,\n    request: operation => {\n      operation.setContext({\n        fetchOptions: {\n          credentials: 'include',\n        },\n        headers,\n      });\n    },\n    //local data\n    clientState: {\n      resolvers: {\n        Mutation: {\n          toggleCart(_,variables, {cache} ){\n            // read the cartOpen value from Cache\n            const {cartOpen} = cache.readQuery({\n              query: LOCAL_STATE_QUERY,\n            });\n            // Write the cart State to the opposite\n\n            const data ={\n              data: {cartOpen: !cartOpen},\n            };\n            cache.writeData(data);\n            return data; \n          },\n        },\n      },\n      defaults: {\n        cartOpen: false,\n      }\n    }\n  });\n}\n\nexport default withApollo(createClient);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AASA;AACA;AACA;AACA;AACA;AADA;AAFA;AAMA;AACA;AACA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AAFA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AALA;AAAA;AAMA;AACA;AAAA;AAAA;AAFA;AACA;AANA;AAKA;AACA;AAGA;AACA;AACA;AAFA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;;;;;;AAaA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AARA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AA/BA;AAuCA;;;;AA9DA;AACA;AAgEA;;;;;;;;;;;;AC5FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AADA;AAGA;AADA;AAFA;AACA;AACA;AAKA;AACA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AAbA;AADA;AAiBA;AACA;AADA;AAlBA;AAXA;AAkCA;AACA;AACA;;;;A","sourceRoot":""}