{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.4f613a6008df23073e98.hot-update.js","sources":["webpack:///./components/Cart.js","webpack:///./components/TakeMyMoney.js"],"sourcesContent":["import React from 'react';\r\nimport { Query, Mutation } from 'react-apollo';\r\nimport gql from 'graphql-tag';\r\nimport { adopt } from 'react-adopt';\r\nimport User from './User';\r\nimport CartStyles from './styles/CartStyles';\r\nimport Supreme from './styles/Supreme';\r\nimport CloseButton from './styles/CloseButton';\r\nimport SickButton from './styles/SickButton';\r\nimport CartItem from './CartItem';\r\nimport calcTotalPrice from '../lib/calcTotalPrice';\r\nimport formatMoney from '../lib/formatMoney';\r\nimport TakeMyMoney from './TakeMyMoney';\r\n\r\nconst LOCAL_STATE_QUERY = gql`\r\n  query {\r\n    cartOpen @client\r\n  }\r\n`;\r\n\r\nconst TOGGLE_CART_MUTATION = gql`\r\n  mutation {\r\n    toggleCart @client\r\n  }\r\n`;\r\n/* eslint-disable */\r\nconst Composed = adopt({\r\n  user: ({ render }) => <User>{render}</User>,\r\n  toggleCart: ({ render }) => <Mutation mutation={TOGGLE_CART_MUTATION}>{render}</Mutation>,\r\n  localState: ({ render }) => <Query query={LOCAL_STATE_QUERY}>{render}</Query>,\r\n});\r\n/* eslint-enable */\r\n\r\nconst Cart = () => (\r\n  <Composed>\r\n    {({ user, toggleCart, localState }) => {\r\n      const me = user.data.me;\r\n      if (!me) return null;\r\n      return (\r\n        <CartStyles open={localState.data.cartOpen}>\r\n          <header>\r\n            <CloseButton onClick={toggleCart} title=\"close\">\r\n              &times;\r\n            </CloseButton>\r\n            <Supreme>{me.name}'s Cart</Supreme>\r\n            <p>\r\n              You Have {me.cart.length} Item{me.cart.length === 1 ? '' : 's'} in your cart.\r\n            </p>\r\n          </header>\r\n          <ul>{me.cart.map(cartItem => <CartItem key={cartItem.id} cartItem={cartItem} />)}</ul>\r\n          <footer>\r\n            <p>{formatMoney(calcTotalPrice(me.cart))}</p>\r\n            {me.cart.length && (\r\n              <TakeMyMoney>\r\n                <SickButton>Checkout</SickButton>\r\n              </TakeMyMoney>\r\n            )}\r\n          </footer>\r\n        </CartStyles>\r\n      );\r\n    }}\r\n  </Composed>\r\n);\r\n\r\nexport default Cart;\r\nexport { LOCAL_STATE_QUERY, TOGGLE_CART_MUTATION };\r\n","import React from 'react';\r\nimport StripeCheckout from 'react-stripe-checkout';\r\nimport { Mutation } from 'react-apollo';\r\nimport Router from 'next/router';\r\nimport NProgress from 'nprogress';\r\nimport PropTypes from 'prop-types';\r\nimport gql from 'graphql-tag';\r\nimport calcTotalPrice from '../lib/calcTotalPrice';\r\nimport Error from './ErrorMessage';\r\nimport User, { CURRENT_USER_QUERY } from './User';\r\n\r\nconst CREATE_ORDER_MUTATION=  gql `\r\nmutation createOrder($token: String!){\r\n  createOrder(token: $token) {\r\n    id\r\n    charge\r\n    total\r\n    items {\r\n      id\r\n      title\r\n    }\r\n  }\r\n}`\r\n\r\nfunction totalItems(cart) {\r\n    return cart.reduce((tally, cartItem) => tally + cartItem.quantity, 0);\r\n  }\r\n\r\n\r\nclass Stripe extends React.Component {\r\n    onToken = async (res, createOrder) => {\r\n      NProgress.start();\r\n        console.log('On Token Called!');\r\n        console.log(res.id);\r\n\r\n        //Manually call the mutation once we have the stripe token\r\n        const order = await createOrder({\r\n          variables:{\r\n            token: res.id,\r\n          },\r\n        }).catch(err => {\r\n          alert(err.message);\r\n        });\r\n        Router.push({\r\n          pathname: '/order',\r\n          query: {id: order.data.createOrder.id},\r\n        })\r\n    };\r\nrender () {\r\n    return (\r\n        <User>\r\n          {({ data: { me } }) => (\r\n            <Mutation mutation={CREATE_ORDER_MUTATION}\r\n            refetchQueries={[{query: CURRENT_USER_QUERY}]}>            \r\n         {(createOrder)=> (\r\n            <StripeCheckout\r\n              amount={calcTotalPrice(me.cart)}\r\n              name=\"cadence\"\r\n              description={`Order of ${totalItems(me.cart)} items!`}\r\n              image={me.cart.length&&me.cart[0].item && me.cart[0].item.image}\r\n              stripeKey=\"pk_test_TL3wgcfvy1IcOZWbdoaIEZU2\"\r\n              currency=\"USD\"\r\n              email={me.email}\r\n              token={res => this.onToken(res, createOrder)}\r\n            >\r\n              {this.props.children}\r\n            </StripeCheckout>\r\n            )}\r\n            </Mutation>\r\n          )}\r\n        </User>\r\n      );\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport default Stripe;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAKA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAKA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AA3BA;AACA;AA8BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAYA;AACA;AAAA;AAAA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAOA;AACA;AADA;AADA;AAKA;AACA;AACA;AAbA;AAMA;AAOA;AACA;AACA;AAAA;AAAA;AAFA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;AAiBA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAHA;AAqBA;;;;AA3CA;AACA;AAgDA;;;;A","sourceRoot":""}